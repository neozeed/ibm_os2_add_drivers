














        

        IBM OS/2 2.0
        OS/2 SCSI DEVICE DRIVER INTERFACE SPECIFICATION
        
        
        Revision 1.31
        



        March 22, 1991


        Distributed by:  Rudy Pietro (407) 982-4239

        IBM Corporation
        IBM Internal Zip 1434
        Boca Raton, FL  33429
        
        
        
        
        This document contains advance information, and is subject to change.
        
        Copyright (C) IBM Corporation 1991, 1992.





        
        CONTENTS:

          1.0 Introduction ........................................... 2

          2.0 Functional Block Diagram ............................... 3

          3.0 Functional Description ................................. 4

          4.0 Generic Ioctl Request .................................. 5
          4.1 ABIOS Services ......................................... 5
            4.1.1 Read Device Parameters ............................. 6
            4.1.2 Reset / Initialize ................................. 8
            4.1.3 Enable Intelligent Buffer .......................... 9
            4.1.4 Disable Intelligent Buffer ........................ 10
            4.1.5 Return Intelligent Buffer Status .................. 11
            4.1.6 Set Device Timeout ................................ 12
            4.1.7 Read Device Timeout ............................... 13
            4.1.8 Transfer SCB ...................................... 14
            4.1.9 Deallocate Device ................................. 16
            4.1.10 Allocate Device .................................. 17
            4.1.11 Return Peripheral Type Count ..................... 19
            4.1.12 Send Abort ....................................... 20

          5.0 Return Codes .......................................... 21

          6.0 Error Recovery Procedure .............................. 24

          7.0 Device-class Driver Model ............................. 25
          7.1 Overview .............................................. 25
          7.2 Initialization Routine ................................ 25
          7.3 Strategy Routine ...................................... 27
          7.4 Interrupt Handler ..................................... 27
          7.5 Data Structures ....................................... 28
            7.5.1 DMA Data Structures ............................... 28

          8.0 Naming Conventions .................................... 29
          8.1 The SCSI Driver ....................................... 29
          8.2 IBM Device Class Drivers .............................. 29
          8.3 Message Files ......................................... 29
















        
                                                            Contents  ii




        

        Preface

        This document describes  the high  level  interface for the SCSI
        Device Driver for Operating System/2.  All functions are  listed
        for completeness of the document.  Functions not implemented are
        so indicated.

        This  document is derived from  the SCSI  Device  Driver  Design
        Workbook  by   Barry  Khatri  and  Dan  Feriozi.   The  internal
        specifications of the  device driver have  been removed  so that
        this document may  be externally distributed to vendors who wish
        to write device drivers to the SCSI device driver interface.

        Revision History

        ş   Initial Release  Version 1.00

        ş   Version 1.01 - Added Read Device Parameters support.

        ş   Version 1.10 - Declassified document.

        ş   Version 1.11 - Added naming conventions section.

        ş   Version  1.20 - Added Intelligent Buffer Functions  support.
            Added Intelligent-Buffer-Not-Supported error code.  Made the
            driver interruptible.

        ş   Version 1.30 - Added DMA data structures warning.


























        
                                                                 Page  1




        
        1.0 INTRODUCTION:

        This document describes the interface for  the  OS/2 SCSI device
        driver.  The SCSI driver is the lower half of  a split model for
        OS/2  SCSI device drivers.  The  SCSI  driver  drives  the  SCSI
        adapter  through the generic scsi ABIOS. At  task time, the SCSI
        driver receives requests from an upper-level device-class driver
        through the inter-device driver communication  ( IDC )  facility
        of OS/2. At initialization time, the SCSI  driver can be invoked
        with a DosDevIoctl call.

        The SCSI driver  provides  the  generic SCSI ABIOS services in a
        declarative interface.  All procedural details of calling  ABIOS
        are hidden by the SCSI driver.  The SCSI driver  also takes care
        of  the  queueing  of  requests,  provides  the  SCSI  interrupt
        handler, and processes timeout conditions.

        The  split  device  driver model uses  the  principles  of  code
        layering to facilitate development  and maintenance  of new SCSI
        device drivers.  Providing  common functions  in the SCSI driver
        also   reduces  memory  requirements.  Performance  is  enhanced
        because the SCSI driver centralizes control of the SCSI channel,
        reducing contention.  Only  one  interrupt handler is registered
        for all of the SCSI peripheral devices.































        
                                                         Introduction  2




        
        2.0 FUNCTIONAL BLOCK DIAGRAM:




        ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        ³                                                              ³
        ³                                                              ³
        ³                       OS/2 KERNEL                            ³
        ³                                                              ³
        ³                                                              ³
        ÀÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
               ³                  ³                 ³
               ³                  ³                 ³
               ³                  ³                 ³
        ÚÄÄÄÄÄÄÁÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÁÄÄÄÄÄÄ¿
        ³ CDROM CLASS  ³ ³  OPTICAL CLASS ³ ³ OTHER CLASS  ³  ....
        ³   DRIVER     ³ ³     DRIVER     ³ ³    DRIVER    ³
        ÀÄÄÄÄÄÄÂÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÂÄÄÄÄÄÄÙ
               ³                  ³                 ³
               ³                  ³                 ³
        ÚÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        ³                                                              ³
        ³                        SCSI DRIVER                           ³
        ³                                                              ³
        ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                      ³
                                      ³
                                      ³
        ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        ³                         SCSI ABIOS                           ³
        ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                                      ³
                                      ³
        ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
        ³                        SCSI ADAPTER                          ³
        ÀÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
               ³                 ³                  ³
               ³                 ³                  ³
        ÚÄÄÄÄÄÄÁÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ¿ ÚÄÄÄÄÄÄÄÁÄÄÄÄÄÄ¿
        ³ CDROM SCSI   ³ ³  OPTICAL SCSI  ³ ³ OTHER SCSI   ³  ....
        ³    DEVICE    ³ ³     DEVICE     ³ ³    DEVICE    ³
        ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ





                      SPLIT DEVICE DRIVER MODEL FOR OS/2






        
                                             Functional Block Diagram  3




        
        3.0 FUNCTIONAL DESCRIPTION:

        The  chart  illustrates  the  relationship  between  the  device
        drivers  and their interaction  with  other  components  of  the
        system.

        A split device driver  model is used for the  SCSI devices other
        than the SCSI  fixed disks, which use the OS/2  base disk device
        driver.  The device-class  driver is the upper-level driver  and
        the  SCSI  driver is  the  lower level driver.  The device-class
        driver does not  interact directly with the  SCSI adapter or the
        SCSI device.  The device-class driver sends commands to the SCSI
        driver, which in  turn sends  commands  to the  device using the
        generic SCSI ABIOS.

        The  device-class  driver looks  very  much  like a  DOS  device
        driver.  The  device-class  driver simply maps  an OS/2  request
        into  an  SCB  or  a  chain  of  SCBs,  and  passes  the request
        immediately to the  SCSI driver.  The  SCSI  driver handles  all
        queueing  and   interrupts.  The  SCSI  driver   insulates   the
        device-class  driver  from  the  procedural  details  of calling
        ABIOS. The device-class driver requests  an  ABIOS service, like
        Transfer SCB, from the SCSI driver.  When control is returned to
        the device-class driver, the ABIOS service has  been  completed.
        If an error occurred, the TSB may contain error information.  In
        addition, sense data may have been returned.





























        
                                               Functional Description  4




        
        4.0 GENERIC IOCTL REQUEST:


        4.1 ABIOS SERVICES

        This routine receives  requests  from  the  device-class driver.
        The  function  category for ABIOS  services  is  80h.  The  SCSI
        driver supports the following SCSI ABIOS requests:

        ş    Read Device Parameters

        ş    Reset/Initialization

        ş    Enable Intelligent Buffer

        ş    Disable Intelligent Buffer

        ş    Return Intelligent Buffer Status

        ş    Set Device Timeout

        ş    Read Device Timeout

        ş    Transfer SCB

        ş    Deallocate Device

        ş    Allocate Device

        ş    Return Peripheral Type Count

        ş    Abort

        The input  to  the SCSI driver is a generic ioctl request packet
        pointed to by  the ES:BX  register pair.  The  function category
        defined for ABIOS Services is 80h and function  code will be 40h
        plus the value for the ABIOS function being requested.


















        
                                                Generic Ioctl Request  5




        
        4.1.1 READ DEVICE PARAMETERS


        This function returns some information about the device which is
        maintained by ABIOS. Of particular interest is  the LUN which is
        required  if  a  SCSI  Send  Other  command  is sent to a bridge
        controller.


        4.1.1.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 43H

        This request  requires  a device  handle  to  be  passed  in the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.1.2 Data Buffer


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Key Index                    WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ SCB Architecture Card Comp. Level   BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Adapter Index                       BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Device Flags                        WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Logical Unit Number ( LUN )         BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Physical Unit Number ( PUN )        BYTE    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ








        
                                                Generic Ioctl Request  6




        
        ş   Adapter Index

            Contains the adapter number for the  SCSI adapter. The valid
            range is from 0 to 3.

        ş   Device Flags

            -   Bit 4   0 = Intelligent Buffer not supported

            -           1 = Intelligent Buffer supported

            -   Bit 1   0 = Device Power On

            -           1 = Device Power Off

            -   Bit 0   0 = Device is not defective

            -           1 = Device is defective





































        
                                                Generic Ioctl Request  7




        
        4.1.2 RESET / INITIALIZE


        This  function  results  in a reset message being issued  to the
        physical device.


        4.1.2.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Sense Data Size                     WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 45H

        This request  requires  a device handle  to  be  passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.2.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.






















        
                                                Generic Ioctl Request  8




        
        4.1.3 ENABLE INTELLIGENT BUFFER


        This  function enables the intelligent buffer capability for all
        subsequent commands to this device.


        4.1.3.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 4DH

        This request requires  a  device  handle to  be  passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.3.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.
























        
                                                Generic Ioctl Request  9




        
        4.1.4 DISABLE INTELLIGENT BUFFER


        This  function  disables  the intelligent buffer capability  for
        subsequent commands to the specified device.


        4.1.4.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 4EH

        This  request  requires a  device  handle to  be passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.4.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.
























        
                                               Generic Ioctl Request  10




        
        4.1.5 RETURN INTELLIGENT BUFFER STATUS


        This  function  returns the intelligent  buffer  status for  the
        specified device.


        4.1.5.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 4FH

        This  request requires a device  handle  to  be  passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.5.2 Data Buffer


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Intelligent Buffer Status           BYTE    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


        Intelligent Buffer Status :   00H   Enabled
                                      01H   Disabled
















        
                                               Generic Ioctl Request  11




        
        4.1.6 SET DEVICE TIMEOUT


        This function sets the timeout value for this device.


        4.1.6.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Timeout Value                       DWORD   ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 50H

        This request requires a device handle and  a timeout value to be
        passed  in  the  request. The timeout  value is in milliseconds.
        The device must be allocated by  the device-class  driver before
        calling this function. The function category  and  function code
        are to be set up as shown above.



        4.1.6.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.






















        
                                               Generic Ioctl Request  12




        
        4.1.7 READ DEVICE TIMEOUT


        This function returns the current timeout value for this device.


        4.1.7.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 51H

        This  request  requires  a device  handle  to  be  passed in the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.



        4.1.7.2 Data Buffer


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Timeout Value                       DWORD   ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        ş   The timeout value is in milliseconds.



















        
                                               Generic Ioctl Request  13




        
        4.1.8 TRANSFER SCB


        This function causes an SCB or a chain of SCBs to be sent to the
        adapter.


        4.1.8.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Sense Data Size                     WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Physical Pointer to SCB             DWORD   ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Logical Pointer to SCB Chain Header DWORD   ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Flags                               BYTE    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 52H

        This  request  requires  a device  handle  to  be passed in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.

        ş   Flags   Bit 0 = 0 Normal Length SCB
                            1 Long SCB

        A normal length SCB is used to send  generic SCSI commands  to a
        device.  The  long  SCB  is used to  send  a  vendor unique SCSI
        command embeded in the SCB.


        4.1.8.2 Data Buffer

        If an error  occurred, the  data buffer may  contain sense data.
        The  return  code  indicates whether  sense  data  is  valid.  A
        termination status block may also have been returned.









        
                                               Generic Ioctl Request  14




        
        4.1.8.3 SCB Chain Header



                 +00H  ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                       ³   Reserved                 ³
                 +02H  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³   Logical Pointer to next  ³
                       ÃÄ  SCB Chain Header        Ä´
                       ³                            ³
                 +06H  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³   Reserved                 ³
                 +08H  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³   Reserved                 ³
                 +0AH  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³   Logical Pointer to TSB   ³
                       ÃÄ                          Ä´
                       ³                            ³
                 +0EH  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³   Reserved                 ³
                 +10H  ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                       ³                            ³
                       ³                            ³
                       ³            SCB             ³
                       ³                            ³
                       ³        Immediately         ³
                       ³                            ³
                       ³           Follows          ³
                       ³                            ³
                       ³             the            ³
                       ³                            ³
                       ³            Chain           ³
                       ³                            ³
                       ³           Header           ³
                       ³                            ³
                       ³                            ³
                       ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ


          SCB  Chain Header


        Refer  to  the IBM Personal  System/2 Micro Channel SCSI Adapter
        Technical Reference for a description of the SCB architecture.











        
                                               Generic Ioctl Request  15




        
        4.1.9 DEALLOCATE DEVICE


        This function deallocates the SCSI Peripheral Device assigned to
        this device handle.


        4.1.9.1 Input Parameter Structure


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 54H

        This request requires  a device  handle  to  be  passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.


        4.1.9.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.


























        
                                               Generic Ioctl Request  16




        
        4.1.10 ALLOCATE DEVICE


        This function allocates a SCSI peripheral device and returns the
        device handle which will be used to access the device.


        4.1.10.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Peripheral Type              BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Device Type Flags                   BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Nth Available                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 55H

        This request requires a  device type, device type flags and  Nth
        available device to  be  passed  in the request. The device type
        flags  defines  the   removable  media   indicator.   The   most
        significant bit of the the  device type flags set indicates that
        the media is  removable. The Nth available is  the Nth device in
        the  device type  group.  If  Nth available  is zero,  the  next
        available device is returned.

        ş   List of SCSI Device Types

            -   DIRECT ACCESS DEVICE        0x00

            -   SEQUENTIAL ACCESS DEVICE    0x01

            -   PRINTER DEVICE              0x02

            -   PROCESSOR DEVICE            0x03

            -   WRITE ONCE READ MULTIPLE    0x04

            -   CDROM DEVICE                0x05

            -   SCANNER DEVICE              0x06

            -   OPTICAL MEMORY DEVICE       0x07

            -   MEDIUM CHANGER DEVICE       0x08

            -   COMMUNICATIONS DEVICE       0x09


        
                                               Generic Ioctl Request  17




        
        4.1.10.2 Data Buffer


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        ş   Device Handle

            The device handle is returned to the caller.











































        
                                               Generic Ioctl Request  18




        
        4.1.11 RETURN PERIPHERAL TYPE COUNT


        This  function  returns a  count of  the number  of devices of a
        particular type which have been registered by ABIOS.


        4.1.11.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Peripheral Type              BYTE    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Device Type Flags                   BYTE    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 56H

        This request  requires a device type and device type flags to be
        passed  in  the  request. The  device  type  flags  defines  the
        removable media indicator. The  most significant bit  of the the
        device type flags set  indicates  that  the  media is removable.
        Function  category and function  code  are to be set up as shown
        above.



        4.1.11.2 Data Buffer


                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Count of Device Type Requested      WORD    ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        ş   Count of Device Type Requested

            Count of device type  requested is returned when the request
            is successfully completed.











        
                                               Generic Ioctl Request  19




        
        4.1.12 SEND ABORT


        This function causes an abort request to be sent to the device.


        4.1.12.1 Input Parameter Structure



                 ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
                 ³   Field                             Length  ³
                 ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
                 ³ Device Handle                       WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Sense Data Size                     WORD    ³
                 ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
                 ³ Reserved                            DWORD   ³
                 ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

          FUNCTION CATEGORY : 80H
          FUNCTION CODE     : 57H

        This  request  requires  a  device  handle to be passed  in  the
        request. The device must be allocated by the device-class driver
        before calling this function. The function category and function
        code are to be set up as shown above.


        4.1.12.2 Data Buffer

        This function does not require a data buffer. Status is returned
        in the status field of the request packet.






















        
                                               Generic Ioctl Request  20




        
        5.0 RETURN CODES:



           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
           ³ 15     14 - 10         9   8    7          6 - 0            ³
           ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
           ³ E                      B   D    S       ERROR CODE          ³
           ³ R      RESERVED        U   O    C      ( WHEN BIT 15 = 1 )  ³
           ³ R                      S   N    S                           ³
           ³ O                      Y   E    I                           ³
           ³ R                                                           ³
           ³                                 E                           ³
           ³                                 R                           ³
           ³                                 R                           ³
           ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
           ³ BIT           Description                                   ³
           ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
           ³ 07           SCSI Driver Specific Error                     ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 08           Operation Complete                             ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 15           Request Completed with Error                   ³
           ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

           ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
           ³ SCSI Error Code        Description                          ³
           ÆÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍµ
           ³ 00H          Device Error   ( Sense Data Returned )         ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 01H          Timeout Error                                  ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 02H          Unusual Wakeup Error                           ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 03H          DevHlp Error                                   ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 04H          Request Block Not Available                    ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 05H          Maximum Device Support Exceeded                ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 06H          Interrupt Level Not Available                  ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 07H          Device Not Available                           ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 08H          More IRQ Levels than Adapters                  ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 09H          Device Busy                                    ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 0AH          Request Sense Failed                           ³
           ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´
           ³ 0BH          Intelligent Buffer Not Supported               ³
           ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

        
                                                        Return Codes  21




        























































        
                                                        Return Codes  22




        
        The SCSI driver  may  return  any of the  standard  OS/2  device
        driver  return codes as  well as the specific error codes listed
        above.

        If bit 15  is  set,  bits 0 -  6  contain an  error  code. If in
        addition, bit 7 is  set,  the error code in bits 0 - 6 is one of
        the SCSI driver  specific error codes from the table. Otherwise,
        it  is  a  standard  OS/2 device  driver  error  code,  such  as
        unknown_command or invalid_parameter.

        The  DONE bit is  always set  by  the  SCSI  driver  so  that  a
        successful return code is 0100h not 0.

        At init  time,  the returned status is  or'ed with FF00h by  the
        kernel.








































        
                                                        Return Codes  23




        
        6.0 ERROR RECOVERY PROCEDURE:

        The SCSI driver will not perform any error recovery  on the SCSI
        adapter. The SCSI  adapter will  not be  allocated and hence, no
        error recovery procedure is followed.

        If a  check condition is detected, the SCSI driver will  request
        sense data from the device and return it to the device  specific
        driver if  successful.  A return  code  of xx80h indicates  that
        sense data has been returned.













































        
                                            Error Recovery Procedure  24




        
        7.0 DEVICE-CLASS DRIVER MODEL:



        7.1 OVERVIEW

        The device-class driver  model is briefly described  here to aid
        in the design of a device-class driver.

        The  device-class  driver receives OS/2 request packets from the
        kernel.  It is responsible for mapping the received request to a
        generic ioctl  request to  be  passed  to SCSI  driver.  When  a
        request  from the  kernel  results  in sending  a  transfer  SCB
        command  to SCSI driver, the device-class  driver allocates  the
        SCB  chain header and formats the SCB  and the SCB chain header.
        The  termination status block must also  be  allocated.  When  a
        request  from the the kernel results  in multiple transfer SCBs,
        the  device-class  driver  chains the  SCBs  and sends only  one
        transfer SCB command to  the SCSI  driver. This  achieves better
        performance  and   guarantees   that   requests   are  processed
        sequentially.

        The  device-class driver calls  the  SCSI  driver  to  send  the
        request  to  the  device.  The  SCSI  driver   returns   to  the
        device-class  driver  after  the request  is  completed.  When a
        transfer SCB request completes with an  error,  the  SCSI driver
        performs a request sense command  to the  device to obtain sense
        data. The sense data is passed back to caller in the data buffer
        area  of  the  generic  ioctl  request packet.  The device-class
        driver may take  some error recovery  steps  at  this  point  or
        return to the kernel, passing the return code from the device.



        7.2 INITIALIZATION ROUTINE

        This routine is called when  the device-class  driver  is  first
        loaded   into    the   system.   This   routine   performs   all
        initialization  required  for  the  device-class driver and  the
        device. At init time, all  calls to the  SCSI  driver  are  made
        through  the  DosDevIoctl  interface.  Initialization  typically
        performs the functions listed below.

        1.  Perform a return peripheral device  count  to determine  the
            count of devices attached.

        2.  Allocate the device.

        3.  Query the device to determine if it is supported.

        4.  Set the return code in the request block.

        5.  Return  the  offsets  for  the  end  of  the  code and  data
            segments.

        
                                           Device-class Driver Model  25




        





















                            Intentionally Left Blank

































        
                                           Device-class Driver Model  26




        



        7.3 STRATEGY ROUTINE

        This routine receives requests  from the  kernel  at task  time.
        The strategy  routine builds a generic ioctl request packet  and
        sends it to the SCSI driver through the  IDC entry point.  Refer
        to  the OS/2  device  driver  technical  reference  manual for a
        description of the IDC facility.

        The generic ioctl request contains the following parameters:

        ş   FUNCTION CATEGORY

            ABIOS services is 80h.

        ş   FUNCTION CODE

            This parameter represents ABIOS function to be  performed by
            SCSI  driver.  The  function  code is  40h  plus  the  ABIOS
            function value.

        ş   PARAMETER BUFFER ADDRESS

            This parameter contains a pointer to the parameters required
            for the function to be performed.

        ş   DATA BUFFER ADDRESS

            This parameter contains a pointer to  the  data buffer where
            returned data is stored.



        7.4 INTERRUPT HANDLER

        An  interrupt handler  is  not  required  for  the  device-class
        driver.  All interrupts  from  the  SCSI peripheral  devices are
        handled by the SCSI driver.















        
                                           Device-class Driver Model  27




        



        7.5 DATA STRUCTURES


        7.5.1 DMA DATA STRUCTURES


        All data structures that will be accessed by the card's DMA must
        be locked into memory before calling scsi.sys. These include:

        ş   SCB chain header and SCBs

        ş   Scatter Gather List

        ş   Scatter Gather data areas

        ş   TSB

        ş   Sense Data Area

        ş   User data areas
































        
                                           Device-class Driver Model  28




        
        8.0 NAMING CONVENTIONS:



        8.1 THE SCSI DRIVER

        The file name  for the SCSI driver  is SCSI.SYS.  The IDC  entry
        point for the SCSI  driver  can  be obtained  from the  AttachDD
        device helper function by using the  name SCSI-02$ as the device
        driver name parameter.


        8.2 IBM DEVICE CLASS DRIVERS

        Current device driver names that we are using are:

                CDROM.SYS       CD-ROM device driver
                OPTICAL.SYS     read/write optical device driver

        Vendors should  be aware of possible naming conflicts and try to
        choose unique  names for their device class  drivers.  In a SCSI
        environment, it is very  possible  that different vendor devices
        for the same SCSI device class may be present in one system.


        8.3 MESSAGE FILES

        The  IBM reserved message file  name is  DEV002.MSG  for  device
        drivers  which  have  been   developed  internally.  Independant
        vendors must NOT use this  file name for their message  file. It
        is suggested that vendors  choose a unique message file name  by
        imbedding part  of their logo or company name  in the file name.
        This  is necessary in order  to  avoid the possibility of having
        different  vendor  devices  having  the  same message  file name
        installed in the  same system. Under these circumstances, one of
        the  message   files  could   be   destroyed  during  the   user
        installation process.


















        
                                                  Naming Conventions  29




        
        Error 15 at line 40 on page     5 file SCSI.SCR line 139 
pointed to by the ES:BX register pair.  
                    ^




















































        
                                                  Naming Conventions  29
